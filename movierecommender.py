# -*- coding: utf-8 -*-
"""movieRecommender.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VLx3zQy_NyAk2GZ4_X0BXtovfNweW_k1
"""

import numpy as np
import pandas as pd
import pickle

movies = pd.read_csv('movies.csv')

# credits = pd.read_csv('/content/credits.csv', quoting = 3,error_bad_lines = False)
credits = pd.read_csv('credits.csv')

movies.shape

credits.shape

# print(movies.columns)
# print(credits.columns)

"""### Main dataset to work upon"""

df = movies.merge(credits, on = "title")

df.head(1)

df.columns

"""### Cleaning"""

df.duplicated().sum()

#useful columns that can be used as attributes:
# genre, keywords, overview, title, movie_id, cast, crew
# id/popularity/production_companies/original_title/tagline are redundant info

df = df[['movie_id', 'title', 'genres', 'keywords', 'overview', 'cast', 'crew']]

df.head()

"""### Processing columns to readable format

```ast.literal_eval(obj)```:
Converts strings to what it's made of, i.e. converts string to list/dict/set/etc.

"""

import ast

def extractTag(obj):
  tagList = []
  for i in ast.literal_eval(obj):
    tagList.append(i['name'])
  return tagList

df['genres'] = df['genres'].apply(extractTag)

df['keywords'] = df['keywords'].apply(extractTag)

df.head()

def extractCast(obj):
  tagList = []
  count = 0
  for i in ast.literal_eval(obj):
    if count!=5:
      tagList.append(i['name'])
      count+=1
  return tagList

df['cast'] = df['cast'].apply(extractCast)

df.loc[234]

def extractDir(obj):
  tagList = []
  for i in ast.literal_eval(obj):
    if i['job'] == 'Director':
      tagList.append(i['name'])
  return tagList

df['crew'] = df['crew'].apply(extractDir)

df.loc[4234]

df['overview'] = df['overview'].apply(lambda x: str(x).split())

df.loc[3333]

# removal of spaces, commas and fullStops: Remove Punctuations
df.columns

df['genres'] = df['genres'].apply(lambda x:[i.replace(" ","") for i in x])
df['keywords'] = df['keywords'].apply(lambda x:[i.replace(" ","") for i in x])
df['overview'] = df['overview'].apply(lambda x:[i.replace(" ","") for i in x])
df['cast'] = df['cast'].apply(lambda x:[i.replace(" ","") for i in x])
df['crew'] = df['crew'].apply(lambda x:[i.replace(" ","") for i in x])

df['genres'] = df['genres'].apply(lambda x:[i.replace(",","") for i in x])
df['keywords'] = df['keywords'].apply(lambda x:[i.replace(",","") for i in x])
df['overview'] = df['overview'].apply(lambda x:[i.replace(",","") for i in x])
df['cast'] = df['cast'].apply(lambda x:[i.replace(",","") for i in x])
df['crew'] = df['crew'].apply(lambda x:[i.replace(",","") for i in x])

df['genres'] = df['genres'].apply(lambda x:[i.replace(".","") for i in x])
df['keywords'] = df['keywords'].apply(lambda x:[i.replace(".","") for i in x])
df['overview'] = df['overview'].apply(lambda x:[i.replace(".","") for i in x])
df['cast'] = df['cast'].apply(lambda x:[i.replace(".","") for i in x])
df['crew'] = df['crew'].apply(lambda x:[i.replace(".","") for i in x])

df.head(3)

"""### Combining all attributes to one column"""

df['tags'] = df['genres'] + df['keywords'] + df['cast'] + df['crew'] + df['overview']
df.head(1)

df = df[['movie_id', 'title', 'tags']]
df.head(1)

df['tags'] = df['tags'].apply(lambda x: " ".join(x))
df['tags'] = df['tags'].apply(lambda x: x.lower())

df.loc[1234]

"""### nltk: natural language toolkit
Used to process natural language, here will be used for stemming

"""

import nltk

from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()

def stem(obj):
  temp = []
  for i in obj.split():
    temp.append(ps.stem(i))

  return " ".join(temp)

df['tags'] = df['tags'].apply(stem)

df['tags'][4321]

import sklearn

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features = 5000, stop_words = 'english')

vectors = cv.fit_transform(df['tags']).toarray()
vectors

from sklearn.metrics.pairwise import cosine_similarity

sim = cosine_similarity(vectors)

sim

def recommend(movie):
    movie_index = df[df['title'] == movie].index[0]
    distances = sim[movie_index]
    movies_list = sorted(list(enumerate(distances)), reverse=True, key=lambda x:x[1])[1:7]
    
    for i in movies_list:
        print(i)
        print(df.iloc[i[0]].title)

pickle.dump(df,open('movie_list.pkl','wb'))
pickle.dump(sim,open('similarity.pkl','wb'))